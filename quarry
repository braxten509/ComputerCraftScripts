-- gets the user's args input in the form of an array of strings where [1] is the first argument
local tArgs = { ... }

-- '#' gets the length of the given list
if #tArgs < 1 or #tArgs < 4 or #tArgs > 4 then

	print( "Input Error. Usage: mineRect <length (x)> <height (y)> <width (z)> <offset (starting spot)>" )

	-- ends the program
	return

end



local cord_l, cord_h, cord_w = 0, 0, 0

-- 12o'clock, 3o'clock, 6o'clock, 9o'clock
local directions = {"12o'clock", "3o'clock", "6o'clock", "9o'clock"}
local direction_selector = 1
local current_direction = directions[direction_selector]



function MoveDown(Int)

	for i = 1, Int do

		turtle.digDown()

		turtle.down()

		cord_h = cord_h + 1

	end

end



function MoveUp(Int)

	for i = 1, Int do

		turtle.digUp()

		turtle.up()

		cord_h = cord_h - 1

	end

end



function InventoryFull()

	local slotCount = 0

	for inventory = 1, 9 do

		if turtle.getItemCount(inventory) > 0 then

			slotCount = slotCount + 1

		end

	end

	if slotCount > 8 then
		
		print("Inventory Full")
		return true

	else

		return false

	end

end



-- syntax: 'L' or 'R'
function ChangeDirection(leftOrRight)

	if leftOrRight == 'R' then

		turtle.turnRight()
		
		direction_selector = direction_selector + 1

		if direction_selector % 5 == 0 then
			
			direction_selector = 1

		end

	elseif leftOrRight == 'L' then

		turtle.turnLeft()
		
		direction_selector = direction_selector - 1

		if direction_selector < 1 then
			
			direction_selector = 4

		end

	else

		error("Syntax error: use string 'L' or 'R'")

	end

	current_direction = directions[direction_selector]

	print(current_direction)

end



-- syntax: "12o'clock", "3o'clock", "6o'clock", or "9o'clock"
function SetDirection(direction)

	while current_direction ~= direction do
	
		ChangeDirection('R')

	end

	print("direction adjusted.")
	
end



function EmptyInventory()

	local stored_l, stored_h, stored_w = cord_l, cord_h, cord_w
	local stored_direction = current_direction

	MoveUp(stored_h)

	SetDirection("3o'clock")

	MoveForward(stored_w, 'cord_w', '-', "don't_mine", "don't_check_inv")

	ChangeDirection('R')

	MoveForward(stored_l, 'cord_l', '-', "don't_mine", "don't_check_inv")

	print("Emptying inventory")
	print("cord_l: ".. cord_l ..", cord_h: ".. cord_h ..", cord_w: ".. cord_w .."")

	--Empty inventory
	for inventory = 1, 9 do

		turtle.select(inventory)
		turtle.drop()

	end

	ChangeDirection('R')
	ChangeDirection('R')

	-- Return to previous position
	print("Returning...")

	MoveDown(stored_h)

	MoveForward(stored_l, 'cord_l', '+', "don't_mine", "don't_check_inv")

	ChangeDirection('L')

	MoveForward(stored_w, 'cord_w', '+', "don't_mine", "don't_check_inv")

	SetDirection(stored_direction)

	-- print("current direction: " .. current_direction)
	-- error("I said stop!!")

	print("Continuing layer...")

end



-- syntax: num; 'cord_l', 'h', or 'w'; '+' or '-'; 'mine' or 'don't_mine'; "don't_check_inv" or "check_inv"
function MoveForward(tilesForward, cordChanged, plusOrMinus, should_mine, shouldCheckInventory)

	for i = 1, tilesForward do

		if shouldCheckInventory == "check_inv" then

			if InventoryFull() then
			
				EmptyInventory()
		
			end

		elseif shouldCheckInventory == "don't_check_inv" then
			
			-- pass

		else

			error("Syntax error. Use string 'check_inv' or 'don't_check_inv'")

		end

		if should_mine == "mine" then

			turtle.dig()

		elseif should_mine ~= "don't_mine" then

			error("Syntax error. Use string 'mine' or 'don't_mine'")

		end

		while turtle.forward() == false do

			print("Turtle blocked")
			turtle.dig()

		end
		
		if plusOrMinus == '+' then

			if cordChanged == "cord_l" then

				cord_l = cord_l + 1

			elseif cordChanged == "cord_h" then

				cord_h = cord_h + 1

			elseif cordChanged == "cord_w" then

				cord_w = cord_w + 1

			else

				error("cord '".. cordChanged .."' not accepted. Use string 'cord_l', 'cord_h', or 'cord_w'")

			end

		elseif plusOrMinus == '-' then

			if cordChanged == "cord_l" then

				cord_l = cord_l - 1

			elseif cordChanged == "cord_h" then
	
				cord_h = cord_h - 1

			elseif cordChanged == "cord_w" then

				cord_w = cord_w - 1

			else

				error("cord '".. cordChanged .."' not accepted. Use string 'cord_l', 'cord_h', or 'cord_w'")

			end

		elseif plusOrMinus ~= '-' or plusOrMinus ~= '+' then

			error("Symbol not accepted. Use char '+' or '-'")

		end

	end

end



function RotateRight()

	ChangeDirection('R')
	turtle.dig()
	turtle.forward()
	ChangeDirection('R')
	turtle.dig()

	cord_w = cord_w + 1

end



function RotateLeft()

	ChangeDirection('L')
	turtle.dig()
	turtle.forward()
	ChangeDirection('L')
	turtle.dig()

	cord_w = cord_w + 1

end



function MineRect(Length, Height, Width, Offset)

	for y = 1 , Height do

		MoveDown(Offset)

		if Height > 1 and y < Height then

			MoveDown(y)

		end

		if Height > 1 and Width == 1 and Length == 1 then

			turtle.digDown()
			cord_h = cord_h + 1
			ChangeDirection('R')

		else

			for x = 1, Width do

				-- Even numbers
				if x % 2 == 0 then

					print("Mine: Even x = ".. x .."")
					print("cord_l: ".. cord_l ..", cord_h: ".. cord_h ..", cord_w: ".. cord_w .."")

					MoveForward(Length-1, 'cord_l', '-', "mine", "check_inv")

					if x ~= Width then

						RotateRight()

					else

						print("Finished mining layer.")

						ChangeDirection('L')

						MoveForward(cord_w, 'cord_w', '-', "don't_mine", "check_inv")

					end

				-- Odd numbers
				else

					print("Mine: Odd x = ".. x .."")
					print("cord_l: ".. cord_l ..", cord_h: ".. cord_h ..", cord_w: ".. cord_w .."")

					MoveForward(Length-1, 'cord_l', '+', "mine", "check_inv")

					if x ~= Width then

						RotateLeft()

					else

						print("Finished mining layer.")
						print("cord_l: ".. cord_l ..", cord_h: ".. cord_h ..", cord_w: ".. cord_w .."")

						-- Move Backwards
						ChangeDirection('R')
						ChangeDirection('R')

						MoveForward(cord_l, 'cord_l', '-', "mine", "check_inv")
							
						ChangeDirection('R')

						MoveForward(cord_w, 'cord_w', '-', "mine", "check_inv")

					end

				end

			end

		end

		print("Empyting Inventory after layer...")
		print("cord_l: ".. cord_l ..", cord_h: ".. cord_h ..", cord_w: ".. cord_w .."")

		MoveUp(y - 1 + Offset)
		ChangeDirection('R')

		--Empty inventory
		for inventory = 1, 9 do

			turtle.select(inventory)
			turtle.drop()

		end

		ChangeDirection('L')
        ChangeDirection('L')

		print("Reset complete")

	end

	print("All blocks mined. Loop ends.")

end


-- Execute the functions together
MineRect(tonumber(tArgs[1]), tonumber(tArgs[2]), tonumber(tArgs[3]), tonumber(tArgs[4]))
